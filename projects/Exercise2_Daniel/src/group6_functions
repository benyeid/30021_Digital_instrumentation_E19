void ADC_setup_PA(void)
{
        RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;          // Clear ADC12 prescaler bits
        RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV8;      // Set ADC12 prescaler to 8
        RCC->AHBENR |= RCC_AHBPeriph_ADC12;         // Enable clock for ADC12

        ADC1->CR = 0x00000000;                  // Clear CR register
        ADC1->CFGR &= 0xFDFFC007;               // Clear ADC1 config register
        ADC1->SQR1 &= ~ADC_SQR1_L;              // Clear regular sequence register 1

            //Verify ADVREG state (ADC voltage regulator)
            //1. Set ADVREGEN from '10' (disabled state) to '00' and then to '01' (enabled)
            //2. Wait 10uS (worst case) before performing calibration and/or
            ADC1->CR &= ~ADC_CR_ADVREGEN;
            ADC1->CR |= ADC_CR_ADVREGEN_0;
            //Wait for at least 10uS before continuing...
                for(uint32_t i = 0; i < 10000; i++);

            ADC1->CR &= ~ADC_CR_ADEN; //Make sure ADC is disabled
            ADC1->CR &= ~ADC_CR_ADCALDIF; //Use single ended calibration
            ADC1->CR |= ADC_CR_ADCAL; //Start calibration
                while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL){} //Wait for calibration to finish
            //Wait > 4 ADC clock cycles after ADCAL bit is cleared
                for(uint32_t i = 0; i < 100; i++);

            //Enable ADC peripheral
            ADC1->CR |= ADC_CR_ADEN;
            //wait for ADC1 to be ready to start conversion
                while (!ADC1->ISR & ADC_ISR_ADRD){}
}

uint16_t ADC_measure_PA(uint8_t ch)
{
            ADC_RegularChannelConfig(ADC1, ch, 1, ADC_SampleTime_1Cycles5);

            ADC_StartConversion(ADC1); // Start ADC read
                while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read

            uint16_t x = ADC_GetConversionValue(ADC1); // Read the ADC value
            return x;
}

timer16_clock_init(){
    RCC->APB2ENR |= RCC_APB2ENR_TIM16EN | RCC_APB2Periph_TIM16;

    TIM16->PSC = 24;
    TIM16->ARR = 254;
    TIM16->DIER |= 0x0000;
    TIM16->CR1 = TIM_CR1_CEN;
    //TIM16->CR2 &= ~TIM_CR2_TI1S;
}


PORTC_outputs_config(){

RCC -> AHBENR |= RCC_AHBPeriph_GPIOC;

///setting PC15 to output
GPIOC->OSPEEDR &=~(0x00000003 << (15 * 2));
GPIOC->OSPEEDR |= (0x00000002 << (15 * 2));

GPIOC->OTYPER &=~(0x0001 << (15));
GPIOC->OTYPER |= (0x0001 << (15));
GPIOC->MODER &= ~(0x00000003 << (15 * 2));
GPIOC->MODER |= (0x00000001 << (15 * 2));

uint16_t val_a9 = GPIOC->IDR & (0b0001 >> 0);
GPIOC->ODR |= (0b0000 >> 15);

///setting PC14 to output
GPIOC->OSPEEDR &=~(0x00000003 << (14 * 2));
GPIOC->OSPEEDR |= (0x00000002 << (14 * 2));

GPIOC->OTYPER &=~(0x0001 << (14));
GPIOC->OTYPER |= (0x0001 << (14));

GPIOC->MODER &= ~(0x00000003 << (14 * 2));
GPIOC->MODER |= (0x00000001 << (14 * 2));

uint16_t val_b4 = GPIOC->IDR & (0x0001 << 0);
GPIOC->ODR |= (0b0000 >> 14);

///setting PC8
GPIOC->OSPEEDR &=~(0x00000003 << (8 * 2));
GPIOC->OSPEEDR |= (0x00000002 << (8 * 2));

GPIOC->OTYPER &=~(0x0001 << (8));
GPIOC->OTYPER |= (0x0001 << (8));

GPIOC->MODER &= ~(0x00000003 << (8 * 2));
GPIOC->MODER |= (0x00000001 << (8 * 2));
uint16_t val_c7 = GPIOC->IDR & (0x0001 << 0);
GPIOC->ODR |= (0b0000 >> 8);

///setting PC6
GPIOC->OSPEEDR &=~(0x00000003 << (6 * 2));
GPIOC->OSPEEDR |= (0x00000002 << (6 * 2));

GPIOC->OTYPER &=~(0x0001 << (6));
GPIOC->OTYPER |= (0x0001 << (6));

GPIOC->MODER &= ~(0x00000003 << (6 * 2));
GPIOC->MODER |= (0x00000001 << (6 * 2));

uint16_t val_c6 = GPIOC->IDR & (0x0001 << 0);
GPIOC->ODR |= (0b0001 >> 6);

}

GPIO_set_AF1_PA6(){
///alternate mode (PA6 connected to AF1; CH1)
//Set alternate function 1 for PA6 to map PA6 and TIM16_CH1
 RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 //Set mode register for A, mask PA6 (AlternateFunction)
 //Set mode register(0x00-Input,0x01-Output,0x02-AlternateFunction,0x03-Analog in/out)
 GPIOA->MODER &= ~(GPIO_MODER_MODER6);
 GPIOA->MODER |= GPIO_MODER_MODER6_1;
 //Set push/pull register(_0x00-No pull_,0x01-Pull-up,0x02-Pull-down)
 GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR6);
 //set speed register(0x01-10MHz, 0x02-2MHz,_0x03-50MHz_)
 GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6; //reset
 GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1 | GPIO_OSPEEDER_OSPEEDR6_0;
 //Set alternate function register (GPIOx_AFRH) for PA6
 GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_1);


 //setting the rest.....................................................................Pa12, PB4 & PB8
/*
 //setting PA6 and PA12
 RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 //Set mode register for A, mask PA6 (AlternateFunction)
 //Set mode register(0x00-Input,0x01-Output,0x02-AlternateFunction,0x03-Analog in/out)
 GPIOA->MODER &= ~(GPIO_MODER_MODER6) &~(GPIO_MODER_MODER12);
 GPIOA->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER12_1;
 //Set push/pull register(_0x00-No pull_,0x01-Pull-up,0x02-Pull-down)
 GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR6) &~ (GPIO_PUPDR_PUPDR12);
 //set speed register(0x01-10MHz, 0x02-2MHz,_0x03-50MHz_)
 GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6 &~GPIO_OSPEEDER_OSPEEDR12; //reset
 GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1 | GPIO_OSPEEDER_OSPEEDR6_0 | GPIO_OSPEEDER_OSPEEDR12_1 | GPIO_OSPEEDER_12_0;
 //Set alternate function register (GPIOx_AFRH) for PA6
 GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_1);
 GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_1);
 */

 /*
 //setting PB4 and PB8
 RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 //Set mode register for A, mask PA6 (AlternateFunction)
 //Set mode register(0x00-Input,0x01-Output,0x02-AlternateFunction,0x03-Analog in/out)
 GPIOA->MODER &= ~(GPIO_MODER_MODER6) &~(GPIO_MODER_MODER12);
 GPIOA->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER12_1;
 //Set push/pull register(_0x00-No pull_,0x01-Pull-up,0x02-Pull-down)
 GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR6) &~ (GPIO_PUPDR_PUPDR12);
 //set speed register(0x01-10MHz, 0x02-2MHz,_0x03-50MHz_)
 GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6 &~GPIO_OSPEEDER_OSPEEDR12; //reset
 GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1 | GPIO_OSPEEDER_OSPEEDR6_0 | GPIO_OSPEEDER_OSPEEDR12_1 | GPIO_OSPEEDER_12_0;
 //Set alternate function register (GPIOx_AFRH) for PA6
 GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_1);
 GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_1);

*/

}

timer16_pwm_init(){
TIM16->CCER &=~ TIM_CCER_CC1P &~ TIM_CCER_CC1E;

TIM16->CCER |= TIM_CCER_CC1P | TIM_CCER_CC1E;

//Setup the TIMx_CCMR1 register:
 TIM16->CCMR1 &= ~TIM_CCMR1_CC1S & ~TIM_CCMR1_OC1PE & ~TIM_CCMR1_OC1M;
 TIM16->CCMR1 |= TIM_CCMR1_OC1PE;
 TIM16->CCMR1 |= TIM_CCMR1_OC1M_3|TIM_CCMR1_OC1M_2|TIM_CCMR1_OC1M_1|TIM_CCMR1_OC1M_0;
 //Setup the TIM16 break/dead time register (TIMx_BDTR) to enable OCx output
 TIM16->BDTR &= ~TIM_BDTR_MOE & ~TIM_BDTR_OSSI & ~TIM_BDTR_OSSR;
 TIM16->BDTR |= TIM_BDTR_MOE;
 //Set duty cycle to 50% by writing the CCRx register
 TIM16->CCR1 = 200; //78; //for 1V //128 for 50%
 }

int getCCR1ValueFromPercentage(double percent)
{
    double result = percent/100*254;
    return (int)result;
}
